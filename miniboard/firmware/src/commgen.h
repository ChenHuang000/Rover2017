/* Warning: This file is automatically generated. Do not modify. */
#ifndef COMMGEN_H
#define COMMGEN_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>

struct comm_data_t {
	uint8_t wrong_command; /* Sent as a reply to unknown commands. */
	uint8_t pause_state; /* 0 = pause (no rover motion) 1 = unpause */
	uint16_t battery_voltage; /* Battery voltage in mV */
	int8_t left_drive; /* -127 = full reverse 128 = full forward */
	int8_t right_drive; /* -127 = full reverse 128 = full forward */
	uint8_t swerve_state; /* 0x00 = Off (no motion), 0x01 = Straight, 0x02 = Turn */
	uint8_t selected_camera; /* 0-3; select camera feed to send to the base station and to send commands to. TODO: define which camera corresponds to which number */
	uint8_t camera_data_length; /* Custom camera commands defined in camera manual. camera_data_length defines the number of data bytes in the command (0-255). camera_data is the command to be sent to the camera. */
	uint8_t camera_data[256]; /* Custom camera commands defined in camera manual. camera_data_length defines the number of data bytes in the command (0-255). camera_data is the command to be sent to the camera. */
	uint8_t debug_str_length; /* Read out the latest debug message. */
	uint8_t debug_str_data[256]; /* Read out the latest debug message. */
};

/* To avoid the volatile qualifier being a pain in the ass, the main loop
 * accesses the DataReal struct through this pointer. */
extern volatile struct comm_data_t *Data;

/* Parse a packet, update the struct, and send a reply. */
void parse_packet(uint8_t *buf, uint16_t count);

/* Note: Sent as a reply to unknown commands. */
void send_command_not_recognized(uint8_t wrong_command);

/* Note: 0 = pause (no rover motion) 1 = unpause */
void send_pause(uint8_t pause_state);

/* Note: Battery voltage in mV */
void send_battery_voltage(uint16_t battery_voltage);

/* Note: -127 = full reverse 128 = full forward */
void send_drive_motor_power(int8_t left_drive, int8_t right_drive);

/* Note: 0x00 = Off (no motion), 0x01 = Straight, 0x02 = Turn */
void send_swerve_drive_state(uint8_t swerve_state);

/* Note: 0-3; select camera feed to send to the base station and to send commands to.
 * TODO: define which camera corresponds to which number */
void send_select_camera(uint8_t selected_camera);

/* Note: Custom camera commands defined in camera manual. camera_data_length defines the
 * number of data bytes in the command (0-255). camera_data is the command to be
 * sent to the camera. */
void send_camera_command(uint8_t camera_data_length, uint8_t * camera_data);
void camera_command_trigger(void);

/* Note: Read out the latest debug message. */
void send_debugging_info(uint8_t debug_str_length, uint8_t * debug_str_data);
void debugging_info_trigger(void);

void pack8(uint8_t *data, uint16_t pos, uint8_t value);
void unpack8(uint8_t *data, uint16_t pos, uint8_t *result);
void pack16(uint8_t *data, uint16_t pos, uint16_t value);
void unpack16(uint8_t *data, uint16_t pos, uint16_t *result);
void pack32(uint8_t *data, uint16_t pos, uint32_t value);
void unpack32(uint8_t *data, uint16_t pos, uint32_t *result);
void pack64(uint8_t *data, uint16_t pos, uint64_t value);
void unpack64(uint8_t *data, uint16_t pos, uint64_t *result);
#ifdef __cplusplus
}
#endif

#endif
